package main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.util.Arrays;

import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class GUI extends JFrame {

	private static final long serialVersionUID = 1L;

	private JPanel panel;
	private JLabel label_graphRed, label_graphYellow, label_graphGreen;
	private JButton button_calculateGraphs;

	private Dimension dimensionGraph;
	private BufferedImage bufferedImage_graphRed, bufferedImage_graphYellow, bufferedImage_graphGreen;
	private Graphics2D graphics2d_graphRed, graphics2d_graphYellow, graphics2d_graphGreen;

	private int[] brightness_red, brightness_yellow, brightness_green;

	public GUI() {
		this.setSize(1000, 560);
		panel = new JPanel();
		panel.setLayout(null);
		panel.setBackground(Color.WHITE);
		panel.setBounds(0, 20, 1000, 680);
		add(panel);

		dimensionGraph = new Dimension(800, 100);

		brightness_red = new int[dimensionGraph.width];
		Arrays.fill(brightness_red, -1);
		brightness_red[0] = 0;
		brightness_red[dimensionGraph.width-1] = 0;
		
		brightness_yellow = new int[dimensionGraph.width];
		Arrays.fill(brightness_yellow, -1);
		brightness_yellow[0] = 0;
		brightness_yellow[dimensionGraph.width-1] = 0;
		
		brightness_green = new int[dimensionGraph.width];
		Arrays.fill(brightness_green, -1);
		brightness_green[0] = 0;
		brightness_green[dimensionGraph.width-1] = 0;

		
		
		label_graphRed = new JLabel();
		label_graphRed.setBounds(25, 25, dimensionGraph.width, dimensionGraph.height);
		label_graphRed.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				brightness_red[e.getX()] = dimensionGraph.height - e.getY();
				refreshLines();
			}
		});
		panel.add(label_graphRed);

		label_graphYellow = new JLabel();
		label_graphYellow.setBounds(25, dimensionGraph.height + 50, dimensionGraph.width, dimensionGraph.height);
		label_graphYellow.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				brightness_yellow[e.getX()] = dimensionGraph.height - e.getY();
				refreshLines();
			}
		});
		panel.add(label_graphYellow);

		label_graphGreen = new JLabel();
		label_graphGreen.setBounds(25, 2 * dimensionGraph.height + 100, dimensionGraph.width, dimensionGraph.height);
		label_graphGreen.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				brightness_green[e.getX()] = dimensionGraph.height - e.getY();
				refreshLines();
			}
		});
		panel.add(label_graphGreen);

		refreshLines();
		
		button_calculateGraphs = new JButton("Calc Graphs");
		button_calculateGraphs.setVerticalTextPosition(AbstractButton.CENTER);
		button_calculateGraphs.setHorizontalTextPosition(AbstractButton.LEADING);
		button_calculateGraphs.setMnemonic(KeyEvent.VK_Q);
		button_calculateGraphs.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		button_calculateGraphs.setBounds(dimensionGraph.width + 25, 25, 200, 40);
		panel.add(button_calculateGraphs);
		

		// this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setTitle("Verkehrsampel");
		this.setResizable(false);
		this.setLayout(null);
		this.getContentPane().setBackground(Color.WHITE);
		this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		this.setVisible(true);
	}

	public void close() {
		System.exit(0);
		this.dispose();
	}

	public void refreshLines() {
		bufferedImage_graphRed = new BufferedImage(dimensionGraph.width, dimensionGraph.height,
				BufferedImage.TYPE_INT_RGB);
		bufferedImage_graphYellow = new BufferedImage(dimensionGraph.width, dimensionGraph.height,
				BufferedImage.TYPE_INT_RGB);
		bufferedImage_graphGreen = new BufferedImage(dimensionGraph.width, dimensionGraph.height,
				BufferedImage.TYPE_INT_RGB);

		graphics2d_graphRed = bufferedImage_graphRed.createGraphics();
		graphics2d_graphRed.setColor(new Color(200, 200, 200));
		graphics2d_graphRed.fillRect(0, 0 * dimensionGraph.height / 4, dimensionGraph.width, dimensionGraph.height / 4);
		graphics2d_graphRed.setColor(new Color(150, 150, 150));
		graphics2d_graphRed.fillRect(0, 1 * dimensionGraph.height / 4, dimensionGraph.width, dimensionGraph.height / 4);
		graphics2d_graphRed.setColor(new Color(100, 100, 100));
		graphics2d_graphRed.fillRect(0, 2 * dimensionGraph.height / 4, dimensionGraph.width, dimensionGraph.height / 4);
		graphics2d_graphRed.setColor(new Color(50, 50, 50));
		graphics2d_graphRed.fillRect(0, 3 * dimensionGraph.height / 4, dimensionGraph.width, dimensionGraph.height / 4);

		int x1 = 0, x2 = 1;

		while (x2 < dimensionGraph.width-1) {
			x2 = x1 + 1;
			while (brightness_red[x2] == -1)
				x2++;

			graphics2d_graphRed.setColor(Color.RED);
			graphics2d_graphRed.setStroke(new BasicStroke(1));
			graphics2d_graphRed.drawLine(x1, dimensionGraph.height - brightness_red[x1], x2, dimensionGraph.height - brightness_red[x2]);

			x1 = x2;
		}

		label_graphRed.setIcon(new ImageIcon(bufferedImage_graphRed));

		graphics2d_graphYellow = bufferedImage_graphYellow.createGraphics();
		graphics2d_graphYellow.setColor(new Color(200, 200, 200));
		graphics2d_graphYellow.fillRect(0, 0 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);
		graphics2d_graphYellow.setColor(new Color(150, 150, 150));
		graphics2d_graphYellow.fillRect(0, 1 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);
		graphics2d_graphYellow.setColor(new Color(100, 100, 100));
		graphics2d_graphYellow.fillRect(0, 2 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);
		graphics2d_graphYellow.setColor(new Color(50, 50, 50));
		graphics2d_graphYellow.fillRect(0, 3 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);

		label_graphYellow.setIcon(new ImageIcon(bufferedImage_graphYellow));

		graphics2d_graphGreen = bufferedImage_graphGreen.createGraphics();
		graphics2d_graphGreen.setColor(new Color(200, 200, 200));
		graphics2d_graphGreen.fillRect(0, 0 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);
		graphics2d_graphGreen.setColor(new Color(150, 150, 150));
		graphics2d_graphGreen.fillRect(0, 1 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);
		graphics2d_graphGreen.setColor(new Color(100, 100, 100));
		graphics2d_graphGreen.fillRect(0, 2 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);
		graphics2d_graphGreen.setColor(new Color(50, 50, 50));
		graphics2d_graphGreen.fillRect(0, 3 * dimensionGraph.height / 4, dimensionGraph.width,
				dimensionGraph.height / 4);

		label_graphGreen.setIcon(new ImageIcon(bufferedImage_graphGreen));

	}
	
	public void calculateGraphs() {
		
	}
	
	private int[] calculateGraph(int[] graph) {
		for (int i = 0; i < graph.length; i++) {
			if (graph[i] == -1) {
				
			} else if (graph[i] < 1 * dimensionGraph.height / 4) {
				graph[i] = 1 * dimensionGraph.height / 8;
			} else if (graph[i] < 2 * dimensionGraph.height / 4) {
				
			} else if (graph[i] < 3 * dimensionGraph.height / 4) {
				
			} else if (graph[i] < 4 * dimensionGraph.height / 4) {
				
			}
		}
		
		return graph;
	}

}
